import * as i0 from '@angular/core';
import { inject, ElementRef, NgZone, Directive, Input, Pipe, NgModule } from '@angular/core';
import { DefaultValueAccessor } from '@angular/forms';
import { MASKITO_DEFAULT_ELEMENT_PREDICATE, maskitoTransform, Maskito, MASKITO_DEFAULT_OPTIONS } from '@maskito/core';

class MaskitoDirective {
    constructor() {
        this.elementRef = inject(ElementRef).nativeElement;
        this.ngZone = inject(NgZone);
        this.maskedElement = null;
        this.options = null;
        this.elementPredicate = MASKITO_DEFAULT_ELEMENT_PREDICATE;
        const accessor = inject(DefaultValueAccessor, { self: true, optional: true });
        if (accessor) {
            const original = accessor.writeValue.bind(accessor);
            accessor.writeValue = (value) => {
                original(this.options
                    ? maskitoTransform(String(value ?? ''), this.options)
                    : value);
            };
        }
    }
    async ngOnChanges() {
        const { elementPredicate, options } = this;
        this.maskedElement?.destroy();
        if (!options) {
            return;
        }
        const predicateResult = await elementPredicate(this.elementRef);
        if (this.elementPredicate !== elementPredicate) {
            // Ignore the result of the predicate if the
            // maskito element has changed before the predicate was resolved.
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.maskedElement = new Maskito(predicateResult, options);
        });
    }
    ngOnDestroy() {
        this.maskedElement?.destroy();
    }
}
MaskitoDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
MaskitoDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.10", type: MaskitoDirective, isStandalone: true, selector: "[maskito]", inputs: { options: ["maskito", "options"], elementPredicate: ["maskitoElement", "elementPredicate"] }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoDirective, decorators: [{
            type: Directive,
            args: [{ standalone: true, selector: '[maskito]' }]
        }], ctorParameters: function () { return []; }, propDecorators: { options: [{
                type: Input,
                args: ['maskito']
            }], elementPredicate: [{
                type: Input,
                args: ['maskitoElement']
            }] } });

class MaskitoPipe {
    transform(value, maskitoOptions) {
        return maskitoTransform(String(value ?? ''), maskitoOptions ?? MASKITO_DEFAULT_OPTIONS);
    }
}
MaskitoPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
MaskitoPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: MaskitoPipe, isStandalone: true, name: "maskito" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoPipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'maskito',
                }]
        }] });

/**
 * @deprecated Just use `MaskitoDirective`, `MaskitoCVA` no longer needed.
 */
class MaskitoCVA {
}
MaskitoCVA.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoCVA, deps: [], target: i0.ɵɵFactoryTarget.Directive });
MaskitoCVA.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.10", type: MaskitoCVA, isStandalone: true, selector: "input[maskito], textarea[maskito]", inputs: { maskito: "maskito" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoCVA, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[maskito], textarea[maskito]',
                }]
        }], propDecorators: { maskito: [{
                type: Input
            }] } });
/**
 * @deprecated Use standalone `MaskitoDirective` and `MaskitoPipe` instead.
 * Learn more: https://maskito.dev/frameworks/angular
 * ___
 * TODO: Delete it in v3.0 (after Taiga UI 4.0 will be released and bumped in this repository).
 * Taiga UI (3.x.x) uses Maskito (1.x.x) <=> Maskito (2.x.x) uses Taiga UI (3.x.x) to build demo application.
 * Also, NPM workspaces create symlinks for `@maskito/*` inside `node_modules`.
 * All this together don't allow us to build Maskito's demo without this legacy module.
 * ___
 * > nx build demo
 * ```
 * ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-date.js:465:29-42 -
 * Error: export 'MaskitoModule' (imported as 'MaskitoModule') was not found in '@maskito/angular'
 * (possible exports: MaskitoCVA, MaskitoDirective, MaskitoPipe)
 * ```
 */
class MaskitoModule {
}
MaskitoModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MaskitoModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: MaskitoModule, imports: [MaskitoDirective, MaskitoCVA, MaskitoPipe], exports: [MaskitoDirective, MaskitoCVA, MaskitoPipe] });
MaskitoModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [MaskitoDirective, MaskitoCVA, MaskitoPipe],
                    exports: [MaskitoDirective, MaskitoCVA, MaskitoPipe],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MaskitoCVA, MaskitoDirective, MaskitoModule, MaskitoPipe };
//# sourceMappingURL=maskito-angular.mjs.map
