import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';
import { DefaultValueAccessor } from '@angular/forms';
import { Maskito, MASKITO_DEFAULT_ELEMENT_PREDICATE, maskitoTransform, } from '@maskito/core';
import * as i0 from "@angular/core";
export class MaskitoDirective {
    constructor() {
        this.elementRef = inject(ElementRef).nativeElement;
        this.ngZone = inject(NgZone);
        this.maskedElement = null;
        this.options = null;
        this.elementPredicate = MASKITO_DEFAULT_ELEMENT_PREDICATE;
        const accessor = inject(DefaultValueAccessor, { self: true, optional: true });
        if (accessor) {
            const original = accessor.writeValue.bind(accessor);
            accessor.writeValue = (value) => {
                original(this.options
                    ? maskitoTransform(String(value ?? ''), this.options)
                    : value);
            };
        }
    }
    async ngOnChanges() {
        const { elementPredicate, options } = this;
        this.maskedElement?.destroy();
        if (!options) {
            return;
        }
        const predicateResult = await elementPredicate(this.elementRef);
        if (this.elementPredicate !== elementPredicate) {
            // Ignore the result of the predicate if the
            // maskito element has changed before the predicate was resolved.
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.maskedElement = new Maskito(predicateResult, options);
        });
    }
    ngOnDestroy() {
        this.maskedElement?.destroy();
    }
}
MaskitoDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
MaskitoDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.10", type: MaskitoDirective, isStandalone: true, selector: "[maskito]", inputs: { options: ["maskito", "options"], elementPredicate: ["maskitoElement", "elementPredicate"] }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskitoDirective, decorators: [{
            type: Directive,
            args: [{ standalone: true, selector: '[maskito]' }]
        }], ctorParameters: function () { return []; }, propDecorators: { options: [{
                type: Input,
                args: ['maskito']
            }], elementPredicate: [{
                type: Input,
                args: ['maskitoElement']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFza2l0by5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyL3NyYy9saWIvbWFza2l0by5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEQsT0FBTyxFQUNILE9BQU8sRUFDUCxpQ0FBaUMsRUFDakMsZ0JBQWdCLEdBQ25CLE1BQU0sZUFBZSxDQUFDOztBQUd2QixNQUFNLE9BQU8sZ0JBQWdCO0lBV3pCO1FBVmlCLGVBQVUsR0FBZ0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMzRCxXQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLGtCQUFhLEdBQW1CLElBQUksQ0FBQztRQUd0QyxZQUFPLEdBQTBCLElBQUksQ0FBQztRQUd0QyxxQkFBZ0IsR0FBNEIsaUNBQWlDLENBQUM7UUFHakYsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUU1RSxJQUFJLFFBQVEsRUFBRTtZQUNWLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXBELFFBQVEsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxLQUFjLEVBQUUsRUFBRTtnQkFDckMsUUFBUSxDQUNKLElBQUksQ0FBQyxPQUFPO29CQUNSLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ3JELENBQUMsQ0FBQyxLQUFLLENBQ2QsQ0FBQztZQUNOLENBQUMsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXO1FBQ3BCLE1BQU0sRUFBQyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUMsR0FBRyxJQUFJLENBQUM7UUFFekMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUU5QixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsT0FBTztTQUNWO1FBRUQsTUFBTSxlQUFlLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEtBQUssZ0JBQWdCLEVBQUU7WUFDNUMsNENBQTRDO1lBQzVDLGlFQUFpRTtZQUNqRSxPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksT0FBTyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs4R0FuRFEsZ0JBQWdCO2tHQUFoQixnQkFBZ0I7NEZBQWhCLGdCQUFnQjtrQkFENUIsU0FBUzttQkFBQyxFQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBQzswRUFPekMsT0FBTztzQkFEYixLQUFLO3VCQUFDLFNBQVM7Z0JBSVQsZ0JBQWdCO3NCQUR0QixLQUFLO3VCQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtPbkNoYW5nZXMsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgaW5qZWN0LCBJbnB1dCwgTmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGVmYXVsdFZhbHVlQWNjZXNzb3J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB0eXBlIHtNYXNraXRvRWxlbWVudFByZWRpY2F0ZSwgTWFza2l0b09wdGlvbnN9IGZyb20gJ0BtYXNraXRvL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBNYXNraXRvLFxuICAgIE1BU0tJVE9fREVGQVVMVF9FTEVNRU5UX1BSRURJQ0FURSxcbiAgICBtYXNraXRvVHJhbnNmb3JtLFxufSBmcm9tICdAbWFza2l0by9jb3JlJztcblxuQERpcmVjdGl2ZSh7c3RhbmRhbG9uZTogdHJ1ZSwgc2VsZWN0b3I6ICdbbWFza2l0b10nfSlcbmV4cG9ydCBjbGFzcyBNYXNraXRvRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogSFRNTEVsZW1lbnQgPSBpbmplY3QoRWxlbWVudFJlZikubmF0aXZlRWxlbWVudDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZSA9IGluamVjdChOZ1pvbmUpO1xuICAgIHByaXZhdGUgbWFza2VkRWxlbWVudDogTWFza2l0byB8IG51bGwgPSBudWxsO1xuXG4gICAgQElucHV0KCdtYXNraXRvJylcbiAgICBwdWJsaWMgb3B0aW9uczogTWFza2l0b09wdGlvbnMgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgnbWFza2l0b0VsZW1lbnQnKVxuICAgIHB1YmxpYyBlbGVtZW50UHJlZGljYXRlOiBNYXNraXRvRWxlbWVudFByZWRpY2F0ZSA9IE1BU0tJVE9fREVGQVVMVF9FTEVNRU5UX1BSRURJQ0FURTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBhY2Nlc3NvciA9IGluamVjdChEZWZhdWx0VmFsdWVBY2Nlc3Nvciwge3NlbGY6IHRydWUsIG9wdGlvbmFsOiB0cnVlfSk7XG5cbiAgICAgICAgaWYgKGFjY2Vzc29yKSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGFjY2Vzc29yLndyaXRlVmFsdWUuYmluZChhY2Nlc3Nvcik7XG5cbiAgICAgICAgICAgIGFjY2Vzc29yLndyaXRlVmFsdWUgPSAodmFsdWU6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG1hc2tpdG9UcmFuc2Zvcm0oU3RyaW5nKHZhbHVlID8/ICcnKSwgdGhpcy5vcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBuZ09uQ2hhbmdlcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qge2VsZW1lbnRQcmVkaWNhdGUsIG9wdGlvbnN9ID0gdGhpcztcblxuICAgICAgICB0aGlzLm1hc2tlZEVsZW1lbnQ/LmRlc3Ryb3koKTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByZWRpY2F0ZVJlc3VsdCA9IGF3YWl0IGVsZW1lbnRQcmVkaWNhdGUodGhpcy5lbGVtZW50UmVmKTtcblxuICAgICAgICBpZiAodGhpcy5lbGVtZW50UHJlZGljYXRlICE9PSBlbGVtZW50UHJlZGljYXRlKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGlmIHRoZVxuICAgICAgICAgICAgLy8gbWFza2l0byBlbGVtZW50IGhhcyBjaGFuZ2VkIGJlZm9yZSB0aGUgcHJlZGljYXRlIHdhcyByZXNvbHZlZC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWFza2VkRWxlbWVudCA9IG5ldyBNYXNraXRvKHByZWRpY2F0ZVJlc3VsdCwgb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tYXNrZWRFbGVtZW50Py5kZXN0cm95KCk7XG4gICAgfVxufVxuIl19